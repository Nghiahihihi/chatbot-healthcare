from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_http_methods, require_GET
from django.shortcuts import render
from django.http import JsonResponse
import json
import numpy as np
import tensorflow as tf
import os
import re
import random
import logging
import traceback

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ==== LOAD M√î H√åNH V√Ä D·ªÆ LI·ªÜU ====
BASE_DIR = os.path.dirname(os.path.abspath(__file__))

try:
    # Load symptom_index.json
    symptom_index_path = os.path.join(BASE_DIR, "model/symptom_index.json")
    if not os.path.exists(symptom_index_path):
        raise FileNotFoundError(f"Kh√¥ng t√¨m th·∫•y file symptom_index.json t·∫°i {symptom_index_path}")
    
    with open(symptom_index_path, "r", encoding="utf-8") as f:
        symptom_index = json.load(f)
    logger.info(f"ƒê√£ load symptom_index.json th√†nh c√¥ng v·ªõi {len(symptom_index)} tri·ªáu ch·ª©ng")

    # Load label_encoder.json
    label_encoder_path = os.path.join(BASE_DIR, "model/label_encoder.json")
    if not os.path.exists(label_encoder_path):
        raise FileNotFoundError(f"Kh√¥ng t√¨m th·∫•y file label_encoder.json t·∫°i {label_encoder_path}")
    
    with open(label_encoder_path, "r", encoding="utf-8") as f:
        disease_classes = json.load(f)
    logger.info(f"ƒê√£ load label_encoder.json th√†nh c√¥ng v·ªõi {len(disease_classes)} b·ªánh")

    # Load disease symptoms
    disease_data_path = os.path.join(BASE_DIR, "data/diseases_50_vietnam.json")
    with open(disease_data_path, "r", encoding="utf-8") as f:
        disease_data = json.load(f)
        disease_symptoms = {entry["name"]: entry["symptoms"] for entry in disease_data}
    logger.info("ƒê√£ load danh s√°ch tri·ªáu ch·ª©ng c·ªßa c√°c b·ªánh th√†nh c√¥ng")

    # Load model
    model_path = os.path.join(BASE_DIR, "model/medical_model.keras")
    if not os.path.exists(model_path):
        model_path = os.path.join(BASE_DIR, "model/medical_model.h5")
        if not os.path.exists(model_path):
            raise FileNotFoundError("Kh√¥ng t√¨m th·∫•y file model (.keras ho·∫∑c .h5)")
    
    logger.info(f"ƒêang load model t·ª´ {model_path}")
    model = tf.keras.models.load_model(model_path)
    logger.info("ƒê√£ load model th√†nh c√¥ng")

except Exception as e:
    logger.error(f"L·ªói khi kh·ªüi t·∫°o: {str(e)}")
    logger.error(traceback.format_exc())
    raise

# ==== TR√í CHUY·ªÜN T·ª∞ NHI√äN ====
conversation_phrases = {
    "ch√†o": ["Xin ch√†o! B·∫°n ƒëang g·∫∑p tri·ªáu ch·ª©ng g√¨ v·∫≠y?", "Ch√†o b·∫°n, m√¨nh l√† tr·ª£ l√Ω y t·∫ø AI, b·∫°n c·∫ßn m√¨nh gi√∫p g√¨?"],
    "gi·ªõi thi·ªáu": ["T√¥i l√† chatbot AI y t·∫ø. T√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n ch·∫©n ƒëo√°n c√°c b·ªánh ph·ªï bi·∫øn d·ª±a tr√™n tri·ªáu ch·ª©ng."],
    "t·∫°m bi·ªát": ["Ch√∫c b·∫°n nhi·ªÅu s·ª©c kh·ªèe. H·∫πn g·∫∑p l·∫°i!", "T·∫°m bi·ªát! Ch√∫c b·∫°n m·ªôt ng√†y t·ªët l√†nh."],
    "c·∫£m ∆°n": ["B·∫°n kh√¥ng c·∫ßn c·∫£m ∆°n ƒë√¢u. M√¨nh ·ªü ƒë√¢y ƒë·ªÉ gi√∫p b·∫°n.", "R·∫•t vui ƒë∆∞·ª£c gi√∫p b·∫°n!"],
    "hello": ["Xin ch√†o! B·∫°n ƒëang g·∫∑p tri·ªáu ch·ª©ng g√¨ v·∫≠y?", "Ch√†o b·∫°n! M√¨nh c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?"],
    "hi": ["Xin ch√†o! B·∫°n ƒëang g·∫∑p tri·ªáu ch·ª©ng g√¨ v·∫≠y?", "Ch√†o b·∫°n! M√¨nh c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?"]
}

def is_smalltalk(user_input):
    user_input = user_input.lower().strip()
    for key in conversation_phrases:
        if key in user_input:
            return random.choice(conversation_phrases[key])
    return None

def is_positive_response(text):
    """Ki·ªÉm tra xem c√¢u tr·∫£ l·ªùi c√≥ ph·∫£i l√† "c√≥" hay kh√¥ng"""
    text = text.lower().strip()
    positive_patterns = [
        r"\bc√≥\b",
        r"\bv√¢ng\b",
        r"\b·ª´\b",
        r"\bƒë√∫ng\b",
        r"\bph·∫£i\b",
        r"\byes\b",
        r"\by\b",
        r"\bok\b",
        r"\br·ªìi\b",
        r"^c√≥$",
        r"^·ª´$",
        r"^ok$"
    ]
    return any(re.search(pattern, text) for pattern in positive_patterns)

def is_negative_response(text):
    """Ki·ªÉm tra xem c√¢u tr·∫£ l·ªùi c√≥ ph·∫£i l√† "kh√¥ng" hay kh√¥ng"""
    text = text.lower().strip()
    negative_patterns = [
        r"\bkh√¥ng\b",
        r"\bko\b",
        r"\bkhong\b",
        r"\bkh\b",
        r"\bh√¥ng\b",
        r"\bno\b",
        r"\bn\b",
        r"^no$",
        r"^k$",
        r"^ko$"
    ]
    return any(re.search(pattern, text) for pattern in negative_patterns)

# ==== TI·ªÄN X·ª¨ L√ù ====
def extract_symptoms_from_text(user_input, symptom_index):
    try:
        clean_text = user_input.lower()
        clean_text = re.sub(r"[\.,;:!?]", " ", clean_text)  # Lo·∫°i b·ªè d·∫•u c√¢u
        # Lo·∫°i b·ªè k√Ω t·ª± ƒë·∫∑c bi·ªát unicode v√† null byte
        clean_text = re.sub(r"[^\w\s]", "", clean_text)
        found = []
        vector = [0] * len(symptom_index)

        # H·ªó tr·ª£ t√¨m ki·∫øm g·∫ßn ƒë√∫ng (fuzzy match)
        for symptom, index in symptom_index.items():
            # T√¨m ch√≠nh x√°c ho·∫∑c g·∫ßn ƒë√∫ng (v√≠ d·ª•: "m·ªát m·ªèi" ~ "m·ªát")
            if symptom in clean_text or any(word in clean_text for word in symptom.split()):
                found.append(symptom)
                vector[index] = 1
        return vector, list(set(found))
    except Exception as e:
        logger.error(f"L·ªói khi extract symptoms: {str(e)}")
        logger.error(traceback.format_exc())
        raise

# ==== GIAO DI·ªÜN HTML ====
def chat_web(request):
    return render(request, "chatbot_chatbox.html")

def get_next_symptom(remaining_symptoms, collected_symptoms):
    """L·∫•y tri·ªáu ch·ª©ng ti·∫øp theo c·∫ßn h·ªèi, b·ªè qua c√°c tri·ªáu ch·ª©ng ƒë√£ h·ªèi"""
    for symptom in remaining_symptoms:
        if symptom not in collected_symptoms:
            return symptom
    return None

# ==== X·ª¨ L√ù H·ªòI THO·∫†I ====
@csrf_exempt
@require_http_methods(["POST"])
def chatbot_predict(request):
    try:
        # Parse request data
        try:
            data = json.loads(request.body)
            user_input = data.get("message", "").strip()
            if not user_input:
                return JsonResponse({
                    "response": "Xin l·ªói, t√¥i kh√¥ng nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i."
                })
            logger.info(f"Nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn: {user_input}")
        except json.JSONDecodeError as e:
            logger.error(f"L·ªói parse JSON: {str(e)}")
            return JsonResponse({
                "response": "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i."
            }, status=400)

        # Kh·ªüi t·∫°o ho·∫∑c l·∫•y session
        session = request.session
        if "symptoms_collected" not in session:
            session["symptoms_collected"] = []
        if "current_disease" not in session:
            session["current_disease"] = None
        if "remaining_symptoms" not in session:
            session["remaining_symptoms"] = []
        if "last_asked_symptom" not in session:
            session["last_asked_symptom"] = None
        if "asked_symptoms" not in session:
            session["asked_symptoms"] = []

        # Ki·ªÉm tra small talk
        smalltalk_response = is_smalltalk(user_input)
        if smalltalk_response:
            return JsonResponse({"response": f"ü§ñ {smalltalk_response}"})

        # X·ª≠ l√Ω c√¢u tr·∫£ l·ªùi c√≥/kh√¥ng cho tri·ªáu ch·ª©ng ƒëang h·ªèi
        if session["remaining_symptoms"] and session["current_disease"] and session["last_asked_symptom"]:
            current_symptom = session["last_asked_symptom"]
            
            if is_positive_response(user_input):
                logger.info(f"Nh·∫≠n ƒë∆∞·ª£c c√¢u tr·∫£ l·ªùi C√ì cho tri·ªáu ch·ª©ng: {current_symptom}")
                if current_symptom not in session["symptoms_collected"]:
                    session["symptoms_collected"].append(current_symptom)
                session["asked_symptoms"].append(current_symptom)
            elif is_negative_response(user_input):
                logger.info(f"Nh·∫≠n ƒë∆∞·ª£c c√¢u tr·∫£ l·ªùi KH√îNG cho tri·ªáu ch·ª©ng: {current_symptom}")
                session["asked_symptoms"].append(current_symptom)
            else:
                return JsonResponse({
                    "response": f"ü§ñ Xin l·ªói, t√¥i ch∆∞a r√µ c√¢u tr·∫£ l·ªùi c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ tr·∫£ l·ªùi 'c√≥' ho·∫∑c 'kh√¥ng'.\nB·∫°n c√≥ b·ªã **{current_symptom}** kh√¥ng?"
                })

            # L·∫•y tri·ªáu ch·ª©ng ti·∫øp theo c·∫ßn h·ªèi
            next_symptom = get_next_symptom(session["remaining_symptoms"], session["asked_symptoms"])
            if next_symptom:
                session["last_asked_symptom"] = next_symptom
                return JsonResponse({
                    "response": f"ü§ñ B·∫°n c√≥ b·ªã **{next_symptom}** kh√¥ng?"
                })
            else:
                session["last_asked_symptom"] = None

        # Extract tri·ªáu ch·ª©ng t·ª´ c√¢u nh·∫≠p c·ªßa ng∆∞·ªùi d√πng
        input_vector, matched = extract_symptoms_from_text(user_input, symptom_index)
        logger.info(f"ƒê√£ t√¨m th·∫•y c√°c tri·ªáu ch·ª©ng: {matched}")

        # Th√™m c√°c tri·ªáu ch·ª©ng m·ªõi v√†o danh s√°ch
        for sym in matched:
            if sym not in session["symptoms_collected"]:
                session["symptoms_collected"].append(sym)
                session["asked_symptoms"].append(sym)

        if not session["symptoms_collected"]:
            # G·ª£i √Ω tri·ªáu ch·ª©ng ph·ªï bi·∫øn n·∫øu kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c
            common_symptoms = list(symptom_index.keys())[:5]
            return JsonResponse({
                "response": "ü§ñ T√¥i ch∆∞a th·∫•y tri·ªáu ch·ª©ng r√µ r√†ng trong c√¢u b·∫°n n√≥i. "
                            "B·∫°n c√≥ th·ªÉ m√¥ t·∫£ c·ª• th·ªÉ h∆°n kh√¥ng? V√≠ d·ª•: 'T√¥i b·ªã s·ªët v√† ƒëau h·ªçng'.\n"
                            f"M·ªôt s·ªë tri·ªáu ch·ª©ng ph·ªï bi·∫øn: {', '.join(common_symptoms)}"
            })

        # T·∫°o vector t·ª´ t·∫•t c·∫£ tri·ªáu ch·ª©ng ƒë√£ thu th·∫≠p
        vector = [0] * len(symptom_index)
        for sym in session["symptoms_collected"]:
            idx = symptom_index.get(sym)
            if idx is not None:
                vector[idx] = 1

        # D·ª± ƒëo√°n
        try:
            x = np.array([vector], dtype=np.float32)
            predictions = model(x, training=False).numpy()[0]
            # L·∫•y top 3 b·ªánh c√≥ x√°c su·∫•t cao nh·∫•t
            top_indices = predictions.argsort()[-3:][::-1]
            confidences = [float(predictions[i]) for i in top_indices]
            diseases = [disease_classes[str(i)] for i in top_indices]
            logger.info(f"Top b·ªánh d·ª± ƒëo√°n: {diseases} v·ªõi ƒë·ªô tin c·∫≠y: {confidences}")
        except Exception as e:
            logger.error(f"L·ªói khi d·ª± ƒëo√°n: {str(e)}")
            logger.error(traceback.format_exc())
            raise

        # N·∫øu ch∆∞a ƒë·ªß tin c·∫≠y, h·ªèi th√™m tri·ªáu ch·ª©ng c·ªßa top b·ªánh
        if confidences[0] < 0.6:
            for idx, disease in zip(top_indices, diseases):
                disease_specific_symptoms = disease_symptoms.get(disease, [])
                remaining = [s for s in disease_specific_symptoms if s not in session["asked_symptoms"]]
                if remaining:
                    session["current_disease"] = disease
                    session["remaining_symptoms"] = remaining
                    next_symptom = get_next_symptom(remaining, session["asked_symptoms"])
                    if next_symptom:
                        session["last_asked_symptom"] = next_symptom
                        return JsonResponse({
                            "response": f"ü§ñ T√¥i nghi ng·ªù b·∫°n c√≥ th·ªÉ m·∫Øc **{disease}**.\n"
                                        f"B·∫°n c√≥ b·ªã **{next_symptom}** kh√¥ng?"
                        })
            # N·∫øu kh√¥ng c√≤n tri·ªáu ch·ª©ng n√†o ƒë·ªÉ h·ªèi
            session["current_disease"] = None
            session["remaining_symptoms"] = []
            session["last_asked_symptom"] = None
            session["asked_symptoms"] = []

        # N·∫øu ƒë·ªß tin c·∫≠y ho·∫∑c ƒë√£ h·ªèi h·∫øt tri·ªáu ch·ª©ng
        response = f"ü§ñ D·ª±a tr√™n th√¥ng tin b·∫°n cung c·∫•p, t√¥i d·ª± ƒëo√°n b·∫°n c√≥ th·ªÉ ƒëang m·∫Øc **{diseases[0]}** (ƒë·ªô tin c·∫≠y: {confidences[0]:.2f}).\n"
        response += f"T√¥i khuy√™n b·∫°n n√™n ƒë·∫øn c∆° s·ªü y t·∫ø ƒë·ªÉ ƒë∆∞·ª£c ki·ªÉm tra k·ªπ h∆°n."

        # Reset session sau khi ƒë∆∞a ra k·∫øt lu·∫≠n
        session["symptoms_collected"] = []
        session["current_disease"] = None
        session["remaining_symptoms"] = []
        session["last_asked_symptom"] = None
        session["asked_symptoms"] = []

        return JsonResponse({"response": response})

    except Exception as e:
        logger.error(f"L·ªói kh√¥ng mong ƒë·ª£i: {str(e)}")
        logger.error(traceback.format_exc())
        return JsonResponse({
            "response": "üö® Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.",
            "error": str(e)
        }, status=500)

@csrf_exempt
@require_GET
def reset_session(request):
    keys = [
        "symptoms_collected",
        "current_disease",
        "remaining_symptoms",
        "last_asked_symptom",
        "asked_symptoms"
    ]
    for k in keys:
        if k in request.session:
            del request.session[k]
    request.session.flush()  # X√≥a to√†n b·ªô session n·∫øu mu·ªën
    return JsonResponse({"response": "ƒê√£ reset cu·ªôc h·ªôi tho·∫°i!"})
